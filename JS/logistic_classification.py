# -*- coding: utf-8 -*-
"""logistic classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-KBI8tOGpEtH_BMOZxrjEvCTdQnSng_u
"""

import tensorflow as tf
import matplotlib.pyplot as plt

x_data = [[1,2], [2,3], [3,1], [4,3], [5,3], [6,2]]
y_data = [[0], [0], [0], [1], [1], [1]]

X = tf.placeholder(tf.float32, shape=[None,2])
Y = tf.placeholder(tf.float32, shape=[None,1])
W = tf.Variable(tf.random_normal([2,1]), name='weight')
B = tf.Variable(tf.zeros(1), name='bias')

H = tf.sigmoid(tf.matmul(X,W)+B)

cost = -tf.reduce_mean(Y*tf.log(H)+(1-Y)*tf.log(1-H))

train = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)
predicted = tf.cast(H>0.5, dtype=tf.float32)
accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted,Y), dtype=tf.float32))

saver = tf.train.Saver()

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(30):
    _, curr_accuracy = sess.run([train, accuracy], feed_dict={X:x_data, Y:y_data})
    print(step, curr_accuracy)
    save_path = saver.save(sess, "/logistic_classification.ckpt")
    
with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(30):
    _, curr_accuracy = sess.run([train, accuracy], feed_dict={X:x_data, Y:y_data})
    print(step, curr_accuracy)
    
with tf.Session() as sess:
  saver.restore(sess, "/logistic_classification.ckpt")
  for step in range(30):
    _, curr_accuracy = sess.run([train, accuracy], feed_dict={X:x_data, Y:y_data})
    print(step, curr_accuracy)

