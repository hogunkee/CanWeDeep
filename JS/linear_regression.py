# -*- coding: utf-8 -*-
"""linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f15jtJb9otBAmc9RiLMGD_D0XxJVtAYW
"""

import tensorflow as tf
import matplotlib.pyplot as plt

x_data = [1,2,3]
y_data = [1,2,3]


X = tf.placeholder(tf.float32, shape=(3,))
Y = tf.placeholder(tf.float32, shape=(3,))
W = tf.Variable(tf.random_normal([1], seed=0), name='weight')
H = X * W

X2 = tf.placeholder(tf.float32, shape=(3,))
Y2 = tf.placeholder(tf.float32, shape=(3,))
W2 = tf.Variable(tf.random_normal([1], seed=0), name='weight2')
H2 = X2 * W2

X3 = tf.placeholder(tf.float32, shape=(3,))
Y3 = tf.placeholder(tf.float32, shape=(3,))
W3 = tf.Variable(tf.random_normal([1], seed=0), name='weight3')
H3 = X3 * W3

learning_rate = 0.1
cost = tf.reduce_mean(tf.square(H-Y))
gradient = tf.reduce_mean((H-Y)*X)
descent = W - learning_rate*gradient
update = W.assign(descent)

cost2 = tf.reduce_mean(tf.square(H2-Y2))
cost3 = tf.reduce_mean(tf.square(H3-Y3))

train1 = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost2)
train2 = tf.train.AdamOptimizer(learning_rate).minimize(cost3)


with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(300):
    curr_cost, _ = sess.run([cost,update], feed_dict={X:x_data, Y:y_data})
    _, cost2_eval, W2_eval = sess.run([train1, cost2, W2], feed_dict={X2:x_data, Y2:y_data})
    _, cost3_eval, W3_eval = sess.run([train2, cost3, W3], feed_dict={X3:x_data, Y3:y_data})
    print(step, '\t', curr_cost, '\t', W.eval(), '\t', cost2_eval, '\t', W2_eval, '\t', cost3_eval, '\t', W3_eval)